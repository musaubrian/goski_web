package views

templ Index() {
	@Base() {
		<div class="w-full bg-green-50/50 flex flex-col justify-center items-center text-slate-950 tracking-tight">
			<form id="ascii-form" class="flex flex-col justify-center items-center w-full h-screen text-lg font-light" method="POST" action="/to-ascii" enctype="multipart/form-data">
				<h1 class="text-4xl font-semibold mb-6 text-center text-wrap text-balance">Image > ASCII Generator</h1>
				<label id="upload-label" for="file-upload" class="cursor-pointer w-4/6 h-52 bg-slate-50 hover:bg-slate-100 transition-all border-2 rounded-lg p-3 flex flex-col justify-center items-center">
					<div id="upload-text" class="font-light text-center">Select Image to convert</div>
					<img id="uploaded-image" class="hidden max-h-full max-w-full object-contain rounded-lg" alt="Uploaded image preview"/>
					<input id="file-upload" type="file" name="image" class="hidden"/>
				</label>
				<button type="submit" class="mt-6 bg-slate-900 text-white px-6 py-2 rounded hover:bg-slate-700 transition-all">Convert</button>
			</form>
			<div class="flex flex-col justify-center items-center min-h-screen w-full mt-8">
				<div class="w-full h-screen overflow-auto bg-slate-100 text-center">
					<pre id="ascii-output" class="whitespace-pre font-mono text-[4px]"></pre>
				</div>
			</div>
		</div>
		<script>
            function resetSuccess() {
                const currentUrl = new URL(window.location.href);
                currentUrl.searchParams.delete('success');
                window.history.replaceState({}, '', currentUrl);
            }

        function resetErr(){
            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.delete('error');
            window.history.replaceState({}, '', currentUrl);
        }
        function getViewportSize() {
            return {
                width: Math.round(window.innerWidth *0.5),
                height: Math.round(window.innerHeight*0.5)
            };
        }


        document.getElementById('file-upload').addEventListener('change', function(event) {
                const file = event.target.files[0];
                const uploadLabel = document.getElementById('upload-label');
                const uploadText = document.getElementById('upload-text');
                const uploadedImage = document.getElementById('uploaded-image');

                if (file) {
                resetErr()
                const reader = new FileReader();
                reader.onload = function(e) {
                uploadText.classList.add('hidden');
                uploadedImage.src = e.target.result;
                uploadedImage.classList.remove('hidden');
                uploadLabel.classList.remove('bg-slate-50', 'border-2', 'hover:bg-slate-100');
                uploadLabel.classList.add('p-0');
                };
                reader.readAsDataURL(file);
                }
                });

        document.getElementById('ascii-form').addEventListener('submit', async function(event) {
                event.preventDefault();

                const fileInput = document.getElementById('file-upload');

                if (!fileInput.files.length) {
                const errorMsg = "Nothing to upload";
                const currentUrl = new URL(window.location.href);
                currentUrl.searchParams.set('error', errorMsg);
                window.location.href = currentUrl;
                return
                }

                const form = event.target;
                const formData = new FormData(form);
                let viewportSize = getViewportSize();

                formData.append('viewportWidth', viewportSize.width);
                formData.append('viewportHeight', viewportSize.height);


                try {
                const response = await fetch(form.action, {
method: form.method,
body: formData,
});

const data = await response.json();
if (response.ok) {
    if (data.ascii) {
        document.getElementById('ascii-output').textContent = data.ascii;
    }
} else if(data.error) {
    const currentUrl = new URL(window.location.href);
    currentUrl.searchParams.set('error', encodeURIComponent(data.error));
    window.history.replaceState({}, '', currentUrl);
}
} catch (error) {
    console.error('Error processing the request:', error);
    const errorMsg = "Something went wrong";
    const currentUrl = new URL(window.location.href);
    currentUrl.searchParams.set('error', errorMsg);
    window.history.replaceState({}, '', currentUrl);
}
});
</script>
	}
}
